import type { NextApiRequest, NextApiResponse } from 'next';
import { sendTelegramNotification } from '@/utils/notifications';

export interface Lead {
  id: string;
  fullName: string;
  email: string;
  company: string;
  role?: string;
  techStack?: string;
  seniority?: string;
  timeZone?: string;
  startDate?: string;
  description?: string;
  consent: boolean;
  status: 'new' | 'contacted' | 'qualified' | 'closed';
  createdAt: string;
  source: string;
}

type LeadsResponse = {
  success: boolean;
  message?: string;
  data?: any;
  error?: string;
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<LeadsResponse>
) {
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  try {
    if (req.method === 'POST') {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
      const leadData = req.body;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!leadData.fullName || !leadData.email || !leadData.company) {
        return res.status(400).json({
          success: false,
          message:
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–∏–º—è, email, –∫–æ–º–ø–∞–Ω–∏—è)',
        });
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞—è–≤–∫–∏
      const lead: Lead = {
        id: Math.random().toString(36).substr(2, 9),
        fullName: leadData.fullName,
        email: leadData.email,
        company: leadData.company,
        role: leadData.role,
        techStack: leadData.techStack,
        seniority: leadData.seniority,
        timeZone: leadData.timeZone,
        startDate: leadData.startDate,
        description: leadData.description,
        consent: leadData.consent || false,
        status: 'new',
        createdAt: new Date().toISOString(),
        source: 'website-form',
      };

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üìã New lead created:', {
        id: lead.id,
        email: lead.email,
        company: lead.company,
        fullName: lead.fullName,
      });

      console.log('process.env.ENABLE_TELEGRAM_NOTIFICATIONS ', process.env.ENABLE_TELEGRAM_NOTIFICATIONS)
      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
      if (process.env.ENABLE_TELEGRAM_NOTIFICATIONS === 'true') {
        (process.env.ENABLE_TELEGRAM_NOTIFICATIONS === 'true'
          ? sendTelegramNotification(lead)
          : Promise.resolve()
        )
          .then((results) => {
            console.log(`‚úÖ Telegram notification sent successfully`);
            console.log('üöÄ All notifications processed');
          })
          .catch((error) => {
            console.error('‚ö†Ô∏è Notifications error:', error.message);
          });
      }

      return res.status(201).json({
        success: true,
        message:
          '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤. üöÄ',
        data: {
          id: lead.id,
          email: lead.email,
          company: lead.company,
        },
      });
    } else if (req.method === 'GET') {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫
      return res.status(200).json({
        success: true,
        data: {
          total: 42,
          new: 12,
          qualified: 18,
          today: 3,
          conversionRate: 43,
          lastUpdated: new Date().toISOString(),
        },
      });
    }

    return res.status(405).json({
      success: false,
      message: 'Method not allowed',
    });
  } catch (error) {
    console.error('Leads API error:', error);
    return res.status(500).json({
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error instanceof Error ? error.message : 'Unknown error',
    });
  }
}
